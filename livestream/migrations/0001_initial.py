# Generated by Django 5.2.4 on 2025-08-03 23:59

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StreamPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('platform_type', models.CharField(choices=[('youtube', 'YouTube Live'), ('facebook', 'Facebook Live'), ('twitch', 'Twitch'), ('vimeo', 'Vimeo Live'), ('direct', 'Direct RTMP'), ('custom', 'Custom Platform')], max_length=20)),
                ('stream_key', models.CharField(blank=True, help_text='Stream key for the platform', max_length=500)),
                ('rtmp_url', models.URLField(blank=True, help_text='RTMP server URL for streaming')),
                ('api_key', models.CharField(blank=True, help_text='API key for platform integration', max_length=500)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Stream Platform',
                'verbose_name_plural': 'Stream Platforms',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LiveStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('stream_type', models.CharField(choices=[('service', 'Church Service'), ('prayer', 'Prayer Meeting'), ('bible_study', 'Bible Study'), ('conference', 'Conference'), ('special_event', 'Special Event'), ('other', 'Other')], default='service', max_length=20)),
                ('scheduled_start', models.DateTimeField()),
                ('scheduled_end', models.DateTimeField(blank=True, null=True)),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('obs_scene_collection', models.CharField(blank=True, help_text='OBS Scene Collection name', max_length=200)),
                ('obs_profile', models.CharField(blank=True, help_text='OBS Profile name', max_length=200)),
                ('thumbnail', models.ImageField(blank=True, help_text='Stream thumbnail/preview image', upload_to='livestream/thumbnails/')),
                ('is_public', models.BooleanField(default=True, help_text='Make stream publicly visible')),
                ('enable_chat', models.BooleanField(default=True, help_text='Enable chat for the stream')),
                ('enable_recording', models.BooleanField(default=True, help_text='Record the stream')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('live', 'Live Now'), ('ended', 'Ended'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('viewer_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_streams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Live Stream',
                'verbose_name_plural': 'Live Streams',
                'ordering': ['-scheduled_start'],
            },
        ),
        migrations.CreateModel(
            name='StreamAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peak_viewers', models.PositiveIntegerField(default=0)),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('average_watch_time', models.DurationField(blank=True, null=True)),
                ('total_chat_messages', models.PositiveIntegerField(default=0)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('stream_quality', models.CharField(blank=True, help_text='Stream quality (1080p, 720p, etc.)', max_length=20)),
                ('dropped_frames', models.PositiveIntegerField(default=0)),
                ('bitrate_average', models.PositiveIntegerField(default=0, help_text='Average bitrate in kbps')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stream', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='livestream.livestream')),
            ],
            options={
                'verbose_name': 'Stream Analytics',
                'verbose_name_plural': 'Stream Analytics',
            },
        ),
        migrations.CreateModel(
            name='StreamChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('platform', models.CharField(blank=True, help_text='Platform where message originated', max_length=20)),
                ('is_moderator', models.BooleanField(default=False)),
                ('is_hidden', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to='livestream.livestream')),
            ],
            options={
                'verbose_name': 'Stream Chat Message',
                'verbose_name_plural': 'Stream Chat Messages',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='StreamBroadcast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_stream_id', models.CharField(blank=True, help_text='Stream ID from the platform', max_length=200)),
                ('platform_url', models.URLField(blank=True, help_text='Direct URL to the stream on platform')),
                ('custom_title', models.CharField(blank=True, help_text='Platform-specific title override', max_length=200)),
                ('custom_description', models.TextField(blank=True, help_text='Platform-specific description override')),
                ('is_active', models.BooleanField(default=True)),
                ('broadcast_started', models.DateTimeField(blank=True, null=True)),
                ('broadcast_ended', models.DateTimeField(blank=True, null=True)),
                ('viewer_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='livestream.livestream')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='livestream.streamplatform')),
            ],
            options={
                'verbose_name': 'Stream Broadcast',
                'verbose_name_plural': 'Stream Broadcasts',
                'unique_together': {('stream', 'platform')},
            },
        ),
        migrations.AddField(
            model_name='livestream',
            name='platforms',
            field=models.ManyToManyField(related_name='streams', through='livestream.StreamBroadcast', to='livestream.streamplatform'),
        ),
    ]
